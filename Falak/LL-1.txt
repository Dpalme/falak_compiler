===========================
    Falak LL(1) Grammar    
===========================


<program>               -> <def-list> EOF

<def-list>              -> <def>*

<def>                   -> <var-def>|<fun-def>

<var-def>               -> "var" <var-list> ";"

<var-list>              -> <id-list>

<id-list>               -> <id> ("," <id>)*

<fun-def>               -> <id> "(" <param-list> ")" "{" <var-def-list> <stmt-list> "}"

<param-list>            -> <id-list>?

<var-def-list>          -> <var-def>*

<stmt-list>             -> <stmt>*

<stmt>                  -> <stmt-assign>|<stmt-inc>|

					        <stmt-dec>|<stmt-fun-call>|

					        <stmt-if>|<stmt-while>|

					        <stmt-do-while>|<stmt-break>|

					        <stmt-return>|<stmt-empty>

<stmt-assign>           -> <id> "=" <expr> ";"

<stmt-incr>             -> "inc" <id> ";"

<stmt-decr>             -> "dec" <id> ";"

<stmt-fun-call>         -> <fun-call> ";"

<fun-call>              -> <id> "(" <expr-list> ")"

<expr-list>             -> <expr>? ("," <expr>)*

<stmt-if>               -> "if" "(" <expr> ")" "{" <stmt-list> "}" <else-if-list> <else>

<else-if-list>          -> ("elseif" "(" <expr> ")" "{" <stmt-list> "}")*

<else>                  -> ("else" "{" <stmt-list> "}")?

<stmt-while>            -> "while" "(" <expr> ")" "{" <stmt-list> "}"

<stmt-do-while>         -> "do" "{" <stmt-list> "}" "while" "(" <expr> ")" ";"

<stmt-break>            -> "break" ";"

<stmt-return>           -> "return" <expr> ";"

<stmt-empty>            -> ";"

<expr>                  -> <expr-or>

<expr-or>               -><expr-and> (<op-or> <expr-and>)*
	
<op-or>                 -> "||" | "^"
	
<expr-and>              -> <expr-comp> (&& <expr-comp>)*
	
<expr-comp>             -> <expr-rel> (<op-comp> <expr-rel>)*
	
<op-comp>               -> "=="|"!="
	
<expr-rel>	            -> <expr-add> (<op-rel> <exrp-add>)*
	
<op-rel>                -> "<" | "<="|">"|">="
	
<expr-add>              -> <expr-mul> (<op-add> <expr-mul>)*

<op-add>                -> "+"|"-"
	
<expr-mul>              -> <expr-unary> (<op-mul> <expr-unary>)*
	
<op-mul>                -> "*"|"/"|"%"
	
<expr-unary>            -> <op-unary> <expr-unary> | <expr-primary>
	
<op-unary>              -> "+"|"-"|"!"
	
<expr-primary>          -> <id>|<fun-call>|<array>|<lit>| "(" <expr> ")"
	
<array>                 -> "[" <expr-list> "]"

<lit>                   -> <lit-bool>|<lit-int>|<lit-char>|<lit-str>