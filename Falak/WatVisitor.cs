/*
  Falak compiler - WebAssembly text file (Wat) code generator.
  
  Authors:
  Javier Pascal Flores          A01375925
  Diego Palmerin Bonada         A01747290
  Hector Ivan Aguirre Arteaga   A01169628

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace Falak
{
    class WatVisitor
    {
        public static IList<int> AsCodePoints(string str)
        {
            var result = new List<int>(str.Length);
            for (var i = 0; i < str.Length; i++)
            {
                if (str[i] == '\\')
                {
                    switch(str[i+1]) {
                        case 'n':
                            result.Add(10);
                            i+=1;
                            break;
                        case 'r':
                            result.Add(13);
                            i+=1;
                            break;
                        case 't':
                            result.Add(9);
                            i+=1;
                            break;
                        case '\\':
                            result.Add(92);
                            i+=1;
                            break;
                        case '\'':
                            result.Add(39);
                            i+=1;
                            break;
                        case '"':
                            result.Add(34);
                            i+=1;
                            break;
                        case 'u':
                            result.Add(Convert.ToInt16(str.Substring(i+2, i + 8), 16));
                            i+=7;
                            break;
                    }
                }
                else
                {
                    result.Add(char.ConvertToUtf32(str, i));
                    if (char.IsHighSurrogate(str, i))
                    {
                        i++;
                    }
                }
            }
            return result;
        }

        int labelCounter = 0;

        public string GenerateLabel()
        {
            return string.Format("${0:00000}", labelCounter++);
        }
        HashSet<string> globals;
        IDictionary<string, FunctionRegister> functions;

        //-----------------------------------------------------------

        public WatVisitor(HashSet<string> variablesTable, IDictionary<string, FunctionRegister> functionsTable)
        {
            this.globals = variablesTable;
            this.functions = functionsTable;
        }

        public string Visit(Program node)
        {
            var globalsStr = "";
            foreach (var name in globals)
            {
                globalsStr += $"  (global ${name} (mut i32) (i32.const 0))\n";
            }
            return ";; WebAssembly text format code generated by "
                + "the falak compiler.\n\n"
                + "(module\n"
                + "   (import \"falak\" \"printi\" (func $printi (param i32) (result i32)))\n"
                + "   (import \"falak\" \"printc\" (func $printc (param i32) (result i32)))\n"
                + "   (import \"falak\" \"prints\" (func $prints (param i32) (result i32)))\n"
                + "   (import \"falak\" \"println\" (func $println (result i32)))\n"
                + "   (import \"falak\" \"readi\" (func $readi (result i32)))\n"
                + "   (import \"falak\" \"reads\" (func $reads (result i32)))\n"
                + "   (import \"falak\" \"new\" (func $new (param i32) (result i32)))\n"
                + "   (import \"falak\" \"size\" (func $size (param i32) (result i32)))\n"
                + "   (import \"falak\" \"add\" (func $add (param i32 i32) (result i32)))\n"
                + "   (import \"falak\" \"get\" (func $get (param i32 i32) (result i32)))\n"
                + "   (import \"falak\" \"set\" (func $set (param i32 i32 i32) (result i32)))\n"
                + globalsStr
                + "  (func\n"
                + "    (export \"start\")\n"
                + "    (result i32)\n\n"
                + "    call $main\n"
                + "    drop\n"
                + "    i32.const 0\n"
                + "  )\n"
                + ""
                + Visit((dynamic)node[0])
                + ")\n";
        }

        public string Visit(While node)
        {
            var label1 = GenerateLabel();
            var label2 = GenerateLabel();
            var sb = new StringBuilder();
            sb.Append($"  block ${label1}:\n");
            sb.Append($"    loop ${label2}:\n");
            sb.Append(Visit((dynamic)node[0]));
            sb.Append("      i32.eqz\n");
            sb.Append($"      br_if {label1}\n");
            sb.Append(Visit((dynamic)node[1]));
            sb.Append($"      br {label2}\n");
            sb.Append("    end\n");
            sb.Append("  end\n");
            return sb.ToString();
        }

        public string Visit(Return node)
        {
            return "\n" + Visit((dynamic)node[0]);
        }

        public string Visit(Function node)
        {
            var sb = new StringBuilder();
            sb.Append($"  (func ${node.AnchorToken.Lexeme}\n");
            foreach (var arg in node[0])
            {
                sb.Append($"    (param ${arg.AnchorToken.Lexeme} i32)\n");
            }
            sb.Append("    (result i32)\n\n");
            sb.Append($"    (local $_temp i32)\n");
            foreach (var variable in node[1])
            {
                sb.Append($"    (local ${variable.AnchorToken.Lexeme} i32)\n");
            }
            sb.Append("\n" + Visit((dynamic)node[2]));
            sb.Append("  )\n");
            return sb.ToString();
        }

        public string Visit(FunCall node)
        {
            return Visit((dynamic)node[0])
                  + $"    call ${node.AnchorToken.Lexeme}\n"
                  + $"    drop\n";
        }

        public string Visit(String node)
        {
            var codes = AsCodePoints(node.AnchorToken.Lexeme.Substring(1, node.AnchorToken.Lexeme.Length - 2));
            var sb = new StringBuilder();
            sb.Append(
                   "    i32.const 0\n"
                 + "    call $new\n"
                 + "    local.set $_temp\n\n"
                 );
            for (var i = 0; i <= codes.Count; i++)
            {
                sb.Append("    local.get $_temp\n");
            }
            foreach (var code in codes)
            {
                sb.Append(
                      $"    i32.const {code}\n"
                    + "    call $add\n"
                    + "    drop\n"
                );
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(DeclarationList node)
        {
            var sb = new StringBuilder();
            foreach (var declaration in node)
            {
                sb.Append(Visit((dynamic)declaration));
            }
            return sb.ToString();
        }

        public string Visit(VarDef node)
        {
            var sb = new StringBuilder();
            foreach (var identifier in node[0])
            {
                sb.Append($"  (local {identifier.AnchorToken.Lexeme} i32)\n");
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(StatementList node)
        {
            return VisitChildren(node);
        }

        //-----------------------------------------------------------
        public string Visit(Assignment node)
        {
            return Visit((dynamic)node[0])
                + $"    local.set ${node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(If node)
        {
            return Visit((dynamic)node[0])
                + "    if\n"
                + Visit((dynamic)node[1])
                + "    end\n";
        }

        //-----------------------------------------------------------
        public string Visit(Identifier node)
        {
            return $"    local.get ${node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(IntLiteral node)
        {
            return $"    i32.const {node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(True node)
        {
            return "    i32.const 1\n";
        }

        //-----------------------------------------------------------
        public string Visit(False node)
        {
            return "    i32.const 0\n";
        }

        //-----------------------------------------------------------
        public string Visit(Neg node)
        {
            return "    i32.const 0\n"
                + Visit((dynamic)node[0])
                + "    i32.sub\n";
        }

        //-----------------------------------------------------------
        public string Visit(And node)
        {
            return VisitBinaryOperator("i32.and", node);
        }

        //-----------------------------------------------------------
        public string Visit(Less node)
        {
            return VisitBinaryOperator("i32.lt_s", node);
        }

        //-----------------------------------------------------------
        public string Visit(Plus node)
        {
            return VisitBinaryOperator("i32.add", node);
        }

        //-----------------------------------------------------------
        public string Visit(Mul node)
        {
            return VisitBinaryOperator("i32.mul", node);
        }

        //-----------------------------------------------------------
        string VisitChildren(Node node)
        {
            var sb = new StringBuilder();
            foreach (var n in node)
            {
                sb.Append(Visit((dynamic)n));
            }
            return sb.ToString();
        }

        string Visit(Node node)
        {
            var sb = new StringBuilder();
            foreach (var n in node)
            {
                sb.Append(Visit((dynamic)n));
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        string VisitBinaryOperator(string op, Node node)
        {
            return Visit((dynamic)node[0])
                + Visit((dynamic)node[1])
                + $"    {op}\n";
        }
    }
}
